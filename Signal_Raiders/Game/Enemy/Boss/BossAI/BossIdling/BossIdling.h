/*
	@file	BossIdling.h
	@brief	ボス徘徊クラス
*/
#pragma once
#ifndef BOSS_IDLING_DEFINED
#define BOSS_IDLING_DEFINED
// 標準ライブラリ
#include <SimpleMath.h>
#include <cassert>
#include <random>
#include <cmath>
// 外部ライブラリ
#include "Libraries/MyLib/DebugString.h"
#include "Libraries/MyLib/InputManager.h"
#include "Libraries/MyLib/MemoryLeakDetector.h"
#include "Game/CommonResources.h"
#include "DeviceResources.h"
// 自作ヘッダーファイル
#include "Game/Enemy/Boss/BossAI/BossAI.h"
#include "Game/KumachiLib/KumachiLib.h"
#include "Game/Enemy/EnemyBullet/EnemyBullet.h"
#include "Game/Interface/IState.h"

//前方宣言
class BossAI;

class BossIdling : public IState
{
private:
	// 敵AI
	BossAI* m_pBoss;
	// 移動
	DirectX::SimpleMath::Vector3 m_position;
	// 座標初期値
	DirectX::SimpleMath::Vector3 m_initialPosition;
	// サイズ
	DirectX::SimpleMath::Vector3 m_scale;
	// 回転
	DirectX::SimpleMath::Quaternion m_rotation;
	// 移動速度
	DirectX::SimpleMath::Vector3 m_velocity;
	// 回転速度
	float m_rotationSpeed;
	// 時間の初期化
	float  m_time;
	// 角度
	float m_angle;

public:
	// アクセサ
	DirectX::SimpleMath::Vector3 GetPosition() const { return m_position; }// 座標取得
	void SetPosition(DirectX::SimpleMath::Vector3 pos) { m_position = pos; }// 座標設定
	DirectX::SimpleMath::Quaternion GetRotation() const { return m_rotation; }// 回転取得
	void SetRotation(DirectX::SimpleMath::Quaternion rot) { m_rotation = rot; }// 回転設定
	void SetScale(DirectX::SimpleMath::Vector3 sca) { m_scale = sca; }// スケール設定
public:
	// publicメンバ関数
	BossIdling(BossAI* pBoss);// コンストラクタ
	virtual ~BossIdling();// デストラクタ
	void Initialize() override;// 初期化
	void Update(float elapsedTime) override;// 更新
};
#endif //BOSS_IDLING_DEFINED