/*
	@file	EnemyBullet.h
	@brief	敵の弾クラス
*/

#pragma once
#ifndef ENEMY_BULLET_DEFINED
#define ENEMY_BULLET_DEFINED
#include "Game/CommonResources.h"
#include "Game/Particle/Particle.h"
#include "Game/Interface/IEnemy.h"
#include "Game/BulletParameters/BulletParameters.h"
class CommonResources;

class EnemyBullet
{	//変数
public:
	enum class BulletType
	{
		STRAIGHT,//直線
		SPIRAL,//螺旋
		VERTICAL// 垂直

	};
	BulletType m_bulletType;// 弾の種類
private:
	// 共通リソース
	CommonResources* m_commonResources;
	// ワールド行列
	DirectX::SimpleMath::Matrix m_worldMatrix;
	DirectX::SimpleMath::Vector3 m_enemyPosition;	// 敵の座標
	DirectX::SimpleMath::Vector3 m_position;		// 弾の座標
	DirectX::SimpleMath::Vector3 m_velocity;		// 弾の速さ
	float m_size;									// 弾の大きさ
	DirectX::SimpleMath::Vector3 m_direction;		// 弾が飛ぶ方向
	std::unique_ptr<DirectX::Model> m_model;
	float m_time;									// 生存時間
	// 発射した敵のポインター
	IEnemy* m_pShooter;
	// 「弾」境界ボックス
	DirectX::BoundingSphere m_boundingSphere;
	// ターゲット
	DirectX::SimpleMath::Vector3 m_target;
	// カメラ
	DirectX::SimpleMath::Vector3 m_cameraEye;
	DirectX::SimpleMath::Vector3 m_cameraTarget;
	DirectX::SimpleMath::Vector3 m_cameraUp;
	// 弾の自転
	float m_angle;
	float m_spiralAngle;
	// 回転方向（螺旋弾用:+なら右回り、-なら左回り）
	int m_rotateDirection;
	// 弾の速度
	float m_bulletSpeed;
	// 弾の軌道
	std::unique_ptr<Particle> m_bulletTrail;
	// モデルの影
	Microsoft::WRL::ComPtr<ID3D11PixelShader> m_pixelShader;
public:
	EnemyBullet(float size);
	~EnemyBullet();
	void Initialize(CommonResources* resources, BulletType type);
	void Update(float elapsedTime);
	void Render(DirectX::SimpleMath::Matrix view, DirectX::SimpleMath::Matrix proj);
	void RenderShadow(DirectX::SimpleMath::Matrix view, DirectX::SimpleMath::Matrix proj);
	void RenderBoundingSphere(DirectX::SimpleMath::Matrix view, DirectX::SimpleMath::Matrix proj);
	void MakeBall(const DirectX::SimpleMath::Vector3& pos, DirectX::SimpleMath::Vector3& dir, DirectX::SimpleMath::Vector3& target);
	//Getter
	DirectX::SimpleMath::Vector3 GetBulletPosition()const { return m_position; }
	DirectX::SimpleMath::Vector3 GetBulletDirection()const { return m_direction; }
	DirectX::BoundingSphere& GetBoundingSphere() { return m_boundingSphere; }
	float GetPlayerPositionY()const { return m_position.y; }
	float GetTime()const { return m_time; }

	BulletType GetBulletType()const { return m_bulletType; }// 弾の種類を取得

	//Setter
	void SetEnemyPosition(DirectX::SimpleMath::Vector3 pos) { m_enemyPosition = pos; }
	void SetBulletPosition(DirectX::SimpleMath::Vector3 pos) { m_position = pos; }
	void SetCameraEye(DirectX::SimpleMath::Vector3 eye) { m_bulletTrail->SetCameraPosition(eye); m_cameraEye = eye; }
	void SetCameraTarget(DirectX::SimpleMath::Vector3 target) { m_bulletTrail->SetCameraTarget(target); m_cameraTarget = target; }
	void SetCameraUp(DirectX::SimpleMath::Vector3 up) { m_bulletTrail->SetCameraUp(up); m_cameraUp = up; }
	void SetShooter(IEnemy* enemy) { m_pShooter = enemy; }
	IEnemy* GetShooter() const { return m_pShooter; }
	// 弾が生成されてからの経過時間が寿命を超えたかどうかを判定する
	bool IsExpired() const { return GetTime() >= BulletParameters::ENEMY_BULLET_LIFETIME; }

	// 螺旋弾の回転方向を決める
	void SetRotateDirection(int direction) { m_rotateDirection = direction; }
private:
	void SpiralBullet();//螺旋弾
	void VerticalBullet();//垂直直進弾
	void StraightBullet();//直線弾
	DirectX::SimpleMath::Matrix BulletWorldMatrix();//弾のワールド行列を作成
};
#endif //ENEMY_BULLET_DEFINED

